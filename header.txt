#include <cmath> 
#include <iostream>
#include"string"

class vector3D
{
	double x1, x2, x3;
public:

	vector3D() {
		x1 = 0;
		x2 = 0;
		x3 = 0;
	}

	vector3D(double a, double b, double c) {
		x1 = a;
		x2 = b;
		x3 = c;
	}

	vector3D sumv(vector3D r) {//сумма векторов
		vector3D temp;
		temp.x1 = x1 + r.x1;
		temp.x2 = x2 + r.x2;
		temp.x3 = x3 + r.x3;
		return temp;
	}

	vector3D difv(vector3D r) {//разница векторов
		vector3D temp;
		temp.x1 = x1 - r.x1;
		temp.x2 = x2 - r.x2;
		temp.x3 = x3 - r.x3;
		return temp;
	}

	vector3D mscalv(double e) //умножение на скаляр
	{
		vector3D temp;
		temp.x1 = x1 * e;
		temp.x2 = x2 * e;
		temp.x3 = x3 * e;
		return temp;
	}

	void compv(vector3D r)//cравнение векторов
	{
		if ((x1 == r.x1) && (x2 == r.x2) && (x3 == r.x3))
		{
			std::cout << "vectors are equal " << std::endl;
		}
		else {
			std::cout << "vectors are not equal " << std::endl;
		}
	}

	double lenghtv()//длина вектора
	{
		return (sqrt(pow(x1, 2) + pow(x2, 2) + pow(x3, 2)));
	}

	double scalv(vector3D r)//скалярное произведение
	{
		return (x1 * r.x1 + x2 * r.x2 + x3 * r.x3);
	}

	void complenv(vector3D r) {//сравнение длин векторов
		if (lenghtv() == r.lenghtv())
		{
			std::cout << "the lengths of the vectors are" << std::endl;
		}
		else if (lenghtv() > r.lenghtv())
		{
			std::cout << "the length of the first vector is greater than the length of the second" << std::endl;
		}
		else if (lenghtv() < r.lenghtv())
		{
			std::cout << "the length of the second vector is greater than the length of the first" << std::endl;
		}
	}

	void printv()
	{
		std::cout << '{' << x1 << ' ' << x2 << ' ' << x3 << '}' << std::endl;
	}

	double getx1() { return x1; }
	double getx2() { return x2; }
	double getx3() { return x3; }

	void setx1(double X) { x1 = X; }
	void setx2(double X) { x2 = X; }
	void setx3(double X) { x3 = X; }

	std::string toString()
	{
		return ("coordinates : { " + std::to_string(getx1()) + ' ' + std::to_string(getx2()) + ' ' + std::to_string(getx3()) + " }");
	}
};
