#include <iostream>

void SConstruc(int* mass, int length, int m)
{
	int* result = new int[m];

	for (int i = 0; i < m; i++)
		result[i] = 0;

	for (int i = 0; i < length; i++)
	{
		result[mass[i]] = 1;
	}
	for (int i = 0; i < m; i++)
	{
		std::cout << result[i] << ' ';
	}
	std::cout << '\n';
}

void FinnalS(int k, int n, int* A, bool* dop, int m)
{
	if (k == n)
	{
		int sum = 0;
		for (size_t i = 0; i < n; i++)
		{
			if (A[i] || A[i] == 0) {
				sum += 1;
			}
		}

		std::cout << " ones quantity - " << sum << std::endl;

		for (int k = 0; k < (n - 1); k++) {
			if ((sum >= m / 2 - 2) && ((A[k+1] - A[k]) == 1))
			{
				SConstruc(A, n, m);
			}
		}
		
	}
	else
	{
		int r = 0;
		if (k <= 0)
			r = 0;
		else
			r = A[k - 1] + 1;
		for (int y = r; y < m; ++y)
		{
			if (dop[y])
			{
				A[k] = y;
				dop[y] = false;
				FinnalS(k + 1, n, A, dop, m);
				dop[y] = true;
			}
		}
	}
}

void GenS(int m)
{
	for (int n = 0; n <= m; n += 2)
	{
		int* A = new int[m];//массив позиций для размещения 1
		bool* dop = new bool[m];//доступно ли число в строящ послед
		for (int i = 0; i <= n; ++i)
			dop[i] = true;

		FinnalS(0, n, A, dop, m);
	}
}

int main()
{
	std::cout << "Enter M: \n";
	int mLength; std::cin >> mLength;
	std::cout << "Generated sequences: \n";
	GenS(mLength);

	std::cin.get();
}